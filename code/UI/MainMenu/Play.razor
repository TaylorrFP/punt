@using Sandbox
@using Sandbox.UI
@using System
@using System.Threading.Tasks
@using Sandbox.Network

@implements INavigatorPage
@namespace Facepunch.UI

<root class="mainmenu">
    <title>Punt!</title>

    <div class="options">



        <div class="button">
            <button class="button" onclick=@(() => DebugPlay())>Singleplayer</button>  <!-- Create lobby isn't being called here when I href' -->
        </div>

        <div class="button" onclick=@( async () => await QueueManager.Instance.StartSearching( QueueType.Solo ) )>
            Solos

            <div class="players">
                <i>person</i>
                @SoloCount
            </div>
        </div>

        <div class="button" onclick=@( async () => await QueueManager.Instance.StartSearching( QueueType.Duo ) )>
            Duos

            <div class="players">
                <i>person</i>
                @DuosCount
            </div>
        </div>

        <a class="button" href="gamebrowser">
            Custom Games

            <div class="players">
                <i>person</i>
                @CustomCount
            </div>
        </a>
        <a class="button" href="">Back</a>
    </div>
</root>

@code
{
    void DebugPlay()
    {
        Scene.LoadFromFile( "scenes/networktestscenebottests.scene" );
    }

    /// <summary>
    /// A cached list of lobbies.
    /// </summary>
    private IEnumerable<LobbyInformation> Lobbies { get; set; } = new List<LobbyInformation>();

    private int SoloCount => Lobbies.Where( x => QueueType.Solo.IsLobbyOfType( x ) ).Count();
    private int DuosCount => Lobbies.Where( x => QueueType.Duo.IsLobbyOfType( x ) ).Count();
    private int CustomCount => Lobbies.Where( x => QueueType.Custom.IsLobbyOfType( x ) ).Count();

    /// <summary>
    /// Are we querying right now?
    /// </summary>
    private bool querying = false;

    /// <summary>
    /// We'll try to run a query every frame, but GetLobbies will return the cached value if we have cached it, so don't worry.. it's fast!
    /// </summary>
    public override void Tick()
    {
        Query();
    }

    private async void Query()
    {
        if ( querying ) return;
        querying = true;
        // Fetch lobbies
        Lobbies = await LobbySystem.GetLobbies();
        querying = false;
    }
}
