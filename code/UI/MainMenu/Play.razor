@using Sandbox;
@using Sandbox.UI;
@using System
@using System.Threading.Tasks
@using System.Threading

@implements INavigatorPage
@namespace Facepunch.UI

<root class="mainmenu">

    <title> Punt!</title>

    <div class="options">

        <div class="button" onclick=@(async () => { NetworkManagerTest.Instance.CreateLobby("0"); await SearchGames("0"); })>
            1v1
        </div>

        <div class="button">
            2v2
        </div>

        <a class="button" href="serverbrowser"> Custom Games</a>

        <div class="button" onclick=@(() => DebugPlay())>
            DebugPlay

        </div>

        <a class="button" href=""> Back</a>



    </div>
</root>

@code
{
    private CancellationTokenSource searchTokenSource;

   

    private void DebugPlay()
    {

        Scene.LoadFromFile("scenes/networktestscene.scene");
    }

    private void CreateLobby(String QueueType)
    {
        NetworkManagerTest.Instance.CreateLobby(QueueType);

    }

    
    private async Task SearchGames(String QueueType)
    {
        searchTokenSource?.Cancel(); // Cancel any previous search before starting a new one
        searchTokenSource = new CancellationTokenSource();

        try
        {
            while (!searchTokenSource.Token.IsCancellationRequested)
            {
                await NetworkManagerTest.Instance.SearchGame(QueueType);
                await Task.Delay(NetworkManagerTest.Instance.searchFrequency, searchTokenSource.Token); // Delay between searches to avoid overwhelming the server
            }
        }
        catch (TaskCanceledException)
        {
            Log.Info("Search canceled.");
        }
        catch (Exception ex)
        {
            Log.Error($"Error occurred: {ex.Message}");
        }
    }

    private void StopSearching()
    {
        searchTokenSource?.Cancel(); // Stop the loop
        Log.Info("Search manually stopped.");
    }
    

}
