@using Sandbox
@using Sandbox.UI
@using System
@using System.Threading.Tasks

@implements INavigatorPage
@namespace Facepunch.UI

<root class="mainmenu">

    <title>Punt!</title>

    <div class="options">

        <div class="button" onclick=@(async () => {await QueueManager.Instance.StartQueueSearch(QueueType.Solo); })>
            <span>Solo</span>
            <span class="queue-number @(QueueManager.Instance.SoloQueuePlayerCount > 0 ? "queue-active" : "queue-inactive")">
                <i>person</i> @QueueManager.Instance.SoloQueuePlayerCount
            </span>
        </div>


        <div class="button" onclick=@(async () => {await QueueManager.Instance.StartQueueSearch(QueueType.Duo); })>
            <span>Duo</span>
            <span class="queue-number @(QueueManager.Instance.DuoQueuePlayerCount > 0 ? "queue-active" : "queue-inactive")">
                <i>person</i> @QueueManager.Instance.DuoQueuePlayerCount
            </span>
        </div>


        <a class="button" href="gamebrowser">

            <span>Custom Games</span>
            <span class="queue-number @(QueueManager.Instance.CustomGamePlayerCount > 0 ? "queue-active" : "queue-inactive")">
                <i>person</i> @QueueManager.Instance.CustomGamePlayerCount
            </span>

        </a>

        <a class="button" href="">Back</a>
    </div>
</root>

@code
{
    public void OnNavigationOpen()
    {
        if ( !QueueManager.Instance.isSearching )
        {
            _ = QueueManager.Instance.QueryAllGames( false, true );
        }
    }

    protected override int BuildHash() => System.HashCode.Combine(
        QueueManager.Instance.TotalActivePlayerCount,
        QueueManager.Instance.SoloQueuePlayerCount,
        QueueManager.Instance.DuoQueuePlayerCount,
        QueueManager.Instance.CustomGamePlayerCount
    );
}
