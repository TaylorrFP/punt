@using Sandbox
@using Sandbox.UI
@using System.Collections.Generic
@inherits PanelComponent
@namespace Sandbox
@using Sandbox.Network;

<root>
    <!-- Draw this first so it's under the other panels -->
    @if (TestGameMode.Instance.State == GameState.Waiting)
    {
        <div class="ready-panel">Waiting for players...</div>
    }
    <div class="team-container">
        <!-- Blue Team Panel -->
        <div class="blue-team">
            @for (int i = 0; i < QueueManager.Instance.QueueTypeInfo.MaxPlayers / 2; i++)
            {
                if (i < TestGameMode.Instance.BlueTeam?.Count)
                {
                    var player = TestGameMode.Instance.BlueTeam[i];
                    <div class="player-wrapper">
                        <div class="player-panel">
                            <img class="image" src="avatar:@player.GameObject.Network.Owner.SteamId" />
                            <span class="player-name">@player.GameObject.Network.Owner.DisplayName (@player.queueScore) </span>
                        </div>
                    </div>
                }
                else if (TestGameMode.Instance.State == GameState.Waiting)
                {
                    <div class="player-panel waiting">waiting for player...</div>
                }
            }
        </div>

        <!-- Red Team Panel -->
        <div class="red-team">
            @for (int i = 0; i < QueueManager.Instance.QueueTypeInfo.MaxPlayers / 2; i++)
            {
                if (i < TestGameMode.Instance.RedTeam?.Count)
                {
                    var player = TestGameMode.Instance.RedTeam[i];
                    <div class="player-wrapper">
                        <div class="player-panel">
                            <span class="player-name">@player.GameObject.Network.Owner.DisplayName (@player.queueScore) </span>
                            <img class="image" src="avatar:@player.GameObject.Network.Owner.SteamId" />
                        </div>
                    </div>
                }
                else if (TestGameMode.Instance.State == GameState.Waiting)
                {
                    <div class="player-panel waiting">waiting for player...</div>
                }
            }
        </div>
    </div>

    <!-- Scoreboard Panel -->
    <div class="scoreboard">
        <div class="blue-score">@TestGameMode.Instance.BlueScore</div>
        <div class="time-panel">@GetRoundTimerString()</div>
        <div class="red-score">@TestGameMode.Instance.RedScore</div>
    </div>

    <!-- Countdown Panel -->
    @if (TestGameMode.Instance.State == GameState.Countdown)
    {
        <div class="countdown-panel">
            <div class="countdown-text">Starting Game</div>
            <div class="countdown-number">@GetCountdownTimeString()</div>
        </div>
    }

    <!-- Results Panel -->
    <!-- Results Panel -->
    <!-- Results Panel -->
    @if (TestGameMode.Instance.State == GameState.Results)
    {
        <div class="results-panel">
            <div class="results-text">@GetWinnerText()</div>
            <div class="results-info">
                <div class="results-entry @(IsWinner() ? "positive-score" : "negative-score")">
                    New Score: @(GetWinnerScore() >= 0 ? $"{GetWinnerScore()}" : $"{GetWinnerScore()}")
                </div>
            </div>
        </div>

        <!-- ✅ Main Menu Button (Outside of Results Panel) -->
        <div class="main-menu-container">
            <button class="main-menu-button" onclick=@(()=>ReturnToMainMenu())>
                Main Menu
            </button>
        </div>
    }
</root>

@code
{
    [Property] public bool refreshUI { get; set; }

    [Property] public int ScoreChange { get; set; }

    string GetRoundTimerString()
    {

        if (TestGameMode.Instance.State == GameState.Overtime)
        {
            return "OVERTIME";

        }

        var time = MathX.Clamp(TestGameMode.Instance.RoundTimeLeft, 0f, 1000f);
        var minutes = (int)time / 60;
        var seconds = (int)time % 60;
        return $"{minutes:00}:{seconds:00}";
    }

    void ReturnToMainMenu()
    {

        Networking.Disconnect();
        Scene.LoadFromFile("scenes/mainmenu.scene");
        QueueManager.Instance.StopSearching(true);

        Log.Info("Returning to Main Menu...");

    }

    string GetCountdownTimeString()
    {


        var time = 4f-TestGameMode.Instance.TimeSinceCountdown;
        var seconds = (int)time % 60;
        return $"{seconds:0}";
    }


    string GetWinnerText()
    {
        // Determine winner based on score
        if (TestGameMode.Instance.BlueScore > TestGameMode.Instance.RedScore)
        {
            if (TestGameMode.Instance.mySide == TeamSide.Blue)

            {


                return "You Win!";

            }
            else if (TestGameMode.Instance.mySide == TeamSide.Red)
            {
                return "You Lose!";
                //we're the loser

            }
        }
        else if (TestGameMode.Instance.RedScore > TestGameMode.Instance.BlueScore)
        {
            if (TestGameMode.Instance.mySide == TeamSide.Red)

            {
                //if we're the winner
                return "You Win!";

            }
            else if (TestGameMode.Instance.mySide == TeamSide.Blue)
            {
                return "You Lose!";
                //we're the loser

            }
        }
        else
        {
            return "You Lose";
        }

        return "You Lose";
    }

    bool IsWinner()
    {
        return GetWinnerText() == "You Win!";
    }

    int GetWinnerScore()
    {
        // If blue wins
        if (TestGameMode.Instance.BlueScore > TestGameMode.Instance.RedScore)
        {
            if(TestGameMode.Instance.mySide == TeamSide.Blue)

            {
                //if we're the winner
                ScoreChange = TestGameMode.Instance.BlueTeamPendingWin;

                return TestGameMode.Instance.BlueTeamPendingWin;

            }
            else if (TestGameMode.Instance.mySide == TeamSide.Red)
            {
                return TestGameMode.Instance.RedTeamPendingLoss;
                //we're the loser

            }

        }
        //if red wins
        else if (TestGameMode.Instance.RedScore > TestGameMode.Instance.BlueScore)
        {
            if (TestGameMode.Instance.mySide == TeamSide.Red)

            {
                //if we're the winner
                return TestGameMode.Instance.RedTeamPendingWin;

            }
            else if (TestGameMode.Instance.mySide == TeamSide.Blue)
            {
                return TestGameMode.Instance.BlueTeamPendingLoss;
                //we're the loser

            }
        }


        return 0;

        //return ScoreChange;
    }

    protected override int BuildHash()
    {
        // Start by combining the count of players and refreshUI
        int hash = System.HashCode.Combine(

            TestGameMode.Instance.PlayerList?.Count ?? 0,
            refreshUI,//This is just for debug, to force the UI to refresh
            TestGameMode.Instance.State,
            GetCountdownTimeString(),
            GetRoundTimerString(),
            TestGameMode.Instance.BlueScore,
            TestGameMode.Instance.RedScore
    );

        // Add the isReady states to the hash
        if (TestGameMode.Instance.PlayerList != null)
        {
            foreach (var player in TestGameMode.Instance.PlayerList)
            {
                hash = System.HashCode.Combine(hash, ScoreChange);
            }
        }

        return hash;
    }
}
